Next.js part1

app 폴더 : 주로 코드짤 폴더 
page.js : 메인페이지 
layout.js : 메인페이지 감싸는 용도의 페이지
public 폴더 : 이미지나 static 파일 보관용  
api 폴더 : 서버기능 만드는 곳 

JSX 문법 1. return( ) 안에 HTML 넣을 때
언제나 하나의 html 태그로 시작해서 하나의 html 태그로 끝나야.
<div>를 더 넣기 싫으면 <></> 이런 무의미한 태그로 감싸도 됩니다. 

JSX 문법 2. class 말고 className 
자바스크립트 class 문법과 겹칠 수 있으니 className=" " 으로 쓰게 되어있습니다. 

JSX 문법 3. html 안에 변수 넣을 땐 { }(데이터바인딩)

JSX 문법 4. style 넣고 싶으면 object 자료형으로 


라우팅 : 페이지 나누는걸 전문용어로 라우팅 
url 작명은 개발자 마음입니다. 어떤 url로 접속하면 어떤 html을 보여줄지 결정 
예를 들어서 /list로 접속하면 상품목록페이지를 보여줌

Next.js를 쓰면 그런 코드를 짤 필요가 없이 폴더와 파일 하나만 만들면 자동으로 됩니다. 
1. app 폴더안에 폴더하나 작명하고
2. 폴더 page.js 파일 만들고 안에 html 작성하면
자동으로 url과 페이지가 완성

페이지 이동 링크 만들고 싶으면 Link라는걸 import 해 온 다음에 <a>태그처럼 쓰면 됨
그래야 새로고침없이 부드럽게 페이지 이동이 가능합니다. 

똑같은 UI는 굳이 페이지마다 직접 작성할 필요는 없고 layout.js 파일에 작성 
옆에 layout.js 파일이 있으면 layout.js 내용 안에 page.js 내용을 담아서 보여줌
상위폴더에 layout.js가 또 있는 경우 상위폴더의 layout.js 안에 하위폴더의 layout.js를 담아서 보여줌
페이지마다 반복적으로 보여줘야할 html UI가 있으면 최상단 layout.js 파일에 만들면 편함

자바스크립트 map 함수 쓰는 법 
1. array에 들어있는 자료갯수만큼 그 안에 있는 코드를 반복실행해줍니다.
2. 콜백함수에 파라미터 아무렇게나 작명하면 (그냥 소괄호안에 있는 함수를 콜백함수라고 합니다 예 : a, i)
그 파라미터는 반복실행될 때 마다 차례로 array 안의 자료들을 하나씩 넣어줍니다.
3. return 오른쪽에 뭐 적으면 array로 담아줍니다.

반복문 사용시 주의사항 반복문으로 반복생성중인 html에는 key={} 속성을 집어넣으라고 권장
{} 안에는 1씩 증가하는 정수 같은거 넣으면 좋음(i)

성능과 속도가 중요하다면 이미지 넣을 때 <Image /> 태그
자동으로 이미지 lazy loading & 사이즈 최적화 & layout shift 방지를 해줌
1. 상단에서 <Image> 태그를 import 해온 뒤에 이미지 보여주길 원하는 곳에서 <Image/> 사용하면 됩니다. 
2. 이미지 경로를 넣으려면 이미지를 상단에서 import 해온 뒤에 그걸 넣어야합니다. 
public 폴더에 있으면 경로는 /public/어쩌구.png 하면 됩니다. 
3. 다른 사이트에 올려둔 이미지를 <Image>에 절대경로로 집어넣고 싶으면 width, height 옵션 

1. 컴포넌트 만들고 싶으면 function을 만들고 작명합니다. 관습적으로 영어 대문자로 시작. 
2. function의 return ( ) 안에 축약할 길고 더러운 html을 담습니다. 
3. 원하는 곳에서 <작명/> 을 사용합니다. 

컴포넌트의 2가지 종류 : server component vs client component

page.js, layout.js에 대충 만드는 컴포넌트들은 전부 server component 입니다.
장점 : 페이지 로드시 자바스크립트가 별로 필요가 없어서 빠름
단점 : html 안에 자바스크립트를 못 넣습니다. useState, useEffect, onClick 이런거 사용불가능합니다.

컴포넌트 만들 때 페이지 맨 위에 'use client' 라는 코드를 넣으면 
그 밑에 있는 모든 컴포넌트는 client component가 됩니다. 
장점 : html 안에 자바스크립트 맘대로 넣어서 기능개발 가능 
단점 : 쓸데없는 자바스크립트로 인해 페이지 용량도 커지고 페이지 로딩속도도 약간 느려질 수 있습니다. 

특히 client component를 로드하려면 hydration이라는 과정을 거치게 되는데
html을 로드하고나서 거기에 리액트 문법을 적용하기 위해
컴퓨터가 html을 읽고 분석하는 과정이 필요한데 그걸 hydration이라고 부릅니다.
그거 때문에 페이지 로드속도가 더 느려집니다. 

그래서 큰 페이지들은 보통 server component로 만들고
자바스크립트 기능이 필요한 특정 부분은 client component로 만들어서 넣는게 좋은 습관

컴포넌트, 변수를 다른 파일에서 사용하려면 export{ }와 import{}from '경로'를 잘 사용하자


props란? : 부모->자식컴포넌트로 변수 줌.
다만 패륜, 불륜 전송은 불가능함 그러니까 최상위 컴포넌트에 변수 쓰자
fetch : next.js에서 db에서 데이터를 받을 때 같은 데이터요청이 있으면 
알아서 한개로 압축해줌(deduplication 가능)


state의 장점 : state가 변경되면  state쓰는 html이 자동으로 재랜더링 됨
다만 홈페이지 제목같이 변동성이 적은부분까지 state를 만들 필요는 없다. 그냥하드코딩해버리자.
state변경함수 사용 시 새로운 state와 기존 state와 같으면 변경을 하지 않는다.그래서 카피를 한다.(next.js part1 마지막강의)




